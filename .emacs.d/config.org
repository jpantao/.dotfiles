#+TITLE:  Emacs config - João Antão
#+AUTHOR: João Antão
#+EMAIL:  jp.antao@campus.fct.unl.pt
#+DESCRIPTION: My emacs configuration.
#+LANGUAGE: en

#+OPTIONS: num:nil
#+PROPERTY: header-args :results silent

This is my emacs configuration in [[https://en.wikipedia.org/wiki/Literate_programming][literate]] programming using [[https://orgmode.org/][Org]].

* Bugs
  List of all the bugs found while setting up the configuration.
** FIXED *BUG Fix spinner -1.7.3 bug
   CLOSED: [2020-01-26 dom 01:07]
   - State "FIXED"      from              [2020-01-26 dom 01:07]
    - State "FIXED"      from "KNOWN"      [2019-12-30 seg 11:45]
    Fix: A way to fix it is by doing package-instal-file on spinner.el
** FIXED SSL/TLL issue.
    CLOSED: [2019-12-30 seg 11:39]
    - State "FIXED"      from "TODO"       [2019-12-30 seg 11:39]
    Fix:
    #+NAME: fix-ssltls
    #+BEGIN_SRC emacs-lisp
      (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
   #+END_SRC


* Startup
  Some processes are required for the rest of the configuration and have to run first.
** Making startup faster
   #+NAME: faster-startup
   #+BEGIN_SRC emacs-lisp
	 (setq package-enable-at-startup nil
		   message-log-max 16384
		   gc-cons-threshold 402653184
		   gc-cons-percentage 0.6
		   auto-window-vscroll nil
		   package--init-file-ensured t)

	 (add-hook 'after-init-hook
			   `(lambda ()
				  (setq gc-cons-threshold 800000
						gc-cons-percentage 0.1)) t)
   #+END_SRC

** Package Archives
   Add package archives:
   #+NAME: package-archives
   #+BEGIN_SRC emacs-lisp
     (unless (assoc-default "melpa" package-archives)
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
   #+END_SRC

** Bootstrap use-package
   The use-package macro allows you to isolate package configuration
   in your .emacs file in a way that is both performance-oriented
   and, well, tidy.
   #+NAME: use-package
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)

	 ;; diminish utilitie
	 (use-package diminish)
   #+END_SRC


* Preferences
  Look and feel tweaks.
** GUI
   - Inhibit startup screen.
     #+NAME: inhibit-startup-screen
     #+BEGIN_SRC emacs-lisp
       (setq inhibit-startup-screen t)
     #+END_SRC

   - Disable the bars.
     #+NAME: disable-bars
     #+BEGIN_SRC emacs-lisp
       (menu-bar-mode -1)
       (tool-bar-mode -1)
       (scroll-bar-mode -1)
     #+END_SRC

   - Disable ring bell.
     #+NAME: disable-bell
     #+BEGIN_SRC emacs-lisp
       (setq ring-bell-function 'ignore)
     #+END_SRC

** Themes
   Emacs theme.
   #+NAME: theme
   #+BEGIN_SRC emacs-lisp
	 (use-package doom-themes
	   :config
	   (load-theme 'doom-city-lights t))
   #+END_SRC

** Fonts
   Font settings.
   #+NAME: fonts
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Fira Code 12" nil t)
   #+END_SRC

** Other
   - Line numbers.
     #+NAME: org-bullets
     #+BEGIN_SRC emacs-lisp
       (global-display-line-numbers-mode)
     #+END_SRC

   - Use tabs for indentation.
     #+NAME: tabs
     #+BEGIN_SRC emacs-lisp
       (setq-default indent-tabs-mode t)
       (setq-default tab-width 4)
       (defvaralias 'c-basic-offset 'tab-width)
     #+END_SRC

   - Highlight current line.
     #+NAME: hl-line-mode
     #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)
     #+END_SRC

   - Highlight matcing paren.
     #+NAME: show-paren-mode
     #+BEGIN_SRC emacs-lisp
       (show-paren-mode t)
     #+END_SRC

   - Kill line kills the whole line including the new line char.
     #+NAME: kill-whole-line
     #+BEGIN_SRC emacs-lisp
       (setq kill-whole-line t)
     #+END_SRC

   - Change (yes or no) no (y or n)
     #+NAME: y-or-n
     #+BEGIN_SRC emacs-lisp
       (defalias 'yes-or-no-p 'y-or-n-p)
     #+END_SRC

   - Don't ask when following symlinks.
     #+NAME: symlink-prompt
     #+BEGIN_SRC emacs-lisp
       (setq vc-follow-symlinks t)
     #+END_SRC

   - Fix scrolling
     #+NAME: scrolling
     #+BEGIN_SRC emacs-lisp
       (setq mouse-wheel-scroll-amount '(2)
         mouse-wheel-progressive-speed nil
         scroll-conservatively 101)
     #+END_SRC

   - Remove trailing whitespaces.
     #+NAME: remove-trailing-whitespaces
     #+BEGIN_SRC emacs-lisp
       (add-hook 'before-save-hook 'delete-trailing-whitespace)
     #+END_SRC

   - Stop backup noise by setting a backup directory.
     #+NAME: backup-directory
     #+BEGIN_SRC emacs-lisp
	   (setq backup-directory-alist `(("." . "~/.saves"))
		 backup-by-copying t
		 delete-old-versions t
		 kept-new-versions 8
		 kept-old-versions 8
		 version-control t
		 auto-save-list-file-prefix nil)
     #+END_SRC

     - Stop Emacs fromwriting in init.el
       #+NAME: clean-init
       #+BEGIN_SRC emacs-lisp
         (setq custom-file (make-temp-file "emacs-custom"))
       #+END_SRC


* Packages & Configuration
  All the packages used and respective configurations as listed in this section.
** Core
   Base packages.
*** which-key
	Keybindings helper.
    #+NAME: which-key
    #+BEGIN_SRC emacs-lisp
	  (use-package which-key
		:diminish which-key-mode
		:config (which-key-mode))
    #+END_SRC
*** undo-tree

	Instead of treating undo/redo as a linear sequence of changes, undo-tree-mode treats undo history as a branching tree of changes.
    #+NAME: undo-tree
    #+BEGIN_SRC emacs-lisp
	  (use-package undo-tree
		:diminish undo-tree-mode
		:bind ("C-x u" . undo-tree-visualize)
		:config
		(progn
		  (global-undo-tree-mode)
		  (setq undo-tree-visualizer-timestamps t)
		  (setq undo-tree-visualizer-diff t)))
    #+END_SRC
*** expand-region
	Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.
    #+NAME: expand-region
    #+BEGIN_SRC emacs-lisp
	  (use-package expand-region
		:bind ("C-+" . er/expand-region))
    #+END_SRC
*** winner-mode
    Winner Mode is a global minor mode. When activated, it allows you to “undo” (and “redo”)
    changes in the window configuration with the key commands ‘C-c left’ and ‘C-c right’.
    #+NAME: winner-mode
    #+BEGIN_SRC emacs-lisp
	  (use-package winner
		:diminish winner-mode
		:config
		(winner-mode 1))
    #+END_SRC
*** ivy
	Ivy, a generic completion mechanism for Emacs.
    #+NAME: ivy-mode
    #+BEGIN_SRC emacs-lisp
	  (use-package ivy
		:diminish ivy-mode
		:bind (("C-x b" . ivy-switch-buffer)
			   ("C-c v" . ivy-push-view)
			   ("C-c V" . ivy-pop-view))
		:config
		(ivy-mode 1))

	  ;; recomended settings
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-count-format "(%d/%d) ")

	  ;; ignore regex tokens order
	  (setq ivy-re-builders-alist
			'((t . ivy--regex-ignore-order)))
    #+END_SRC
*** avy
	avy is a GNU Emacs package for jumping to visible text using a char-based decision tree.
    #+NAME: avy
    #+BEGIN_SRC emacs-lisp
	(use-package avy
		:bind ("C-." . avy-goto-char))
    #+END_SRC

*** swiper
	Swiper, an Ivy-enhanced alternative to isearch.
    #+NAME: swiper
    #+BEGIN_SRC emacs-lisp
	  (use-package swiper
		:bind ("M-s" . swiper))
    #+END_SRC
*** projectile
	Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies.
	#+NAME: projectile
	#+BEGIN_SRC emacs-lisp
	  (use-package projectile
		:diminish projectile-mode
		:config
		(projectile-mode))

	  ;; integrate with ivy
	  (setq projectile-completion-system 'ivy)

	  ;;use counsel projectile
	  (use-package counsel-projectile
		:bind ("C-c p" . projectile-command-map)
		:hook (after-init . counsel-projectile-mode))

	  ;; ag silver searcher
	  (use-package ag)
	#+END_SRC
*** counsel
	Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
    #+NAME: counsel
    #+BEGIN_SRC emacs-lisp
	  (use-package counsel
		:bind (("M-x" . counsel-M-X)
			   ("M-x" . counsel-M-x)
			   ("C-x C-f" . counsel-find-file)
			   ("C-x y" . counsel-yank-pop)
			   ("<f1> f" . counsel-describe-function)
			   ("<f1> v" . counsel-describe-variable)
			   ("<f1> l" . counsel-find-library)
			   ("<f2> i" . counsel-info-lookup-symbol)
			   ("<f2> u" . counsel-unicode-char)
			   ("<f2> j" . counsel-set-variable))
		:config
		;; remove the ^ from the default regex
		(setq-default ivy-initial-inputs-alist nil))
    #+END_SRC

*** treemacs
	File explorer for emacs full of features.
    #+NAME: treemacs
    #+BEGIN_SRC emacs-lisp
	  (use-package treemacs
		:defer t
		:bind (("M-0" . treemacs-select-window)
			   ("C-x t 1" . treemacs-delete-other-windows)
			   ("C-x t t" . treemacs)
			   ("C-x t B" . treemacs-bookmarkt)
			   ("C-x t C-t" . treemacs-find-file)
			   ("C-x t M-t" . treemacs-find-tag))
		:init
		(with-eval-after-load 'winum
		  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
		:config
		(progn
		  (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
				treemacs-deferred-git-apply-delay      0.5
				treemacs-directory-name-transformer    #'identity
				treemacs-display-in-side-window        t
				treemacs-eldoc-display                 t
				treemacs-file-event-delay              5000
				treemacs-file-extension-regex          treemacs-last-period-regex-value
				treemacs-file-follow-delay             0.2
				treemacs-file-name-transformer         #'identity
				treemacs-follow-after-init             t
				treemacs-git-command-pipe              ""
				treemacs-goto-tag-strategy             'refetch-index
				treemacs-indentation                   2
				treemacs-indentation-string            " "
				treemacs-is-never-other-window         nil
				treemacs-max-git-entries               5000
				treemacs-missing-project-action        'ask
				treemacs-no-png-images                 nil
				treemacs-no-delete-other-windows       t
				treemacs-project-follow-cleanup        nil
				treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
				treemacs-position                      'left
				treemacs-recenter-distance             0.1
				treemacs-recenter-after-file-follow    nil
				treemacs-recenter-after-tag-follow     nil
				treemacs-recenter-after-project-jump   'always
				treemacs-recenter-after-project-expand 'on-distance
				treemacs-show-cursor                   nil
				treemacs-show-hidden-files             t
				treemacs-silent-filewatch              nil
				treemacs-silent-refresh                nil
				treemacs-sorting                       'alphabetic-asc
				treemacs-space-between-root-nodes      t
				treemacs-tag-follow-cleanup            t
				treemacs-tag-follow-delay              1.5
				treemacs-width                         43)

		  ;; The default width and height of the icons is 22 pixels. If you are
		  ;; using a Hi-DPI display, uncomment this to double the icon size.
		  ;;(treemacs-resize-icons 44)

		  (treemacs-follow-mode t)
		  (treemacs-filewatch-mode t)
		  (treemacs-fringe-indicator-mode t)
		  (pcase (cons (not (null (executable-find "git")))
					   (not (null treemacs-python-executable)))
			(`(t . t)
			 (treemacs-git-mode 'deferred))
			(`(t . _)
			 (treemacs-git-mode 'simple)))))

	  ;; projectile integration
	  (use-package treemacs-projectile
		:after treemacs projectile)

	  ;; magit integration
	  (use-package treemacs-magit
		:after treemacs magit)
    #+END_SRC

*** smart-mode-line
	Smart Mode Line is a sexy mode-line for Emacs. It aims to be easy to read from small to large monitors by using colors, a prefix feature, and smart truncation.
    #+NAME: smart-mode-line
    #+BEGIN_SRC emacs-lisp
	  (use-package smart-mode-line
		:config
		(setq sml/no-confirm-load-theme t)
		(setq sml/theme 'respectful)
		(sml/setup))
    #+END_SRC
*** all-the-icons
	Icons for Emacs.
	#+NAME: all-the-icons
    #+BEGIN_SRC emacs-lisp
	  ;; Install the resource fonts when running for the first time
	  ;; by running M-x all-the-icons-install-fonts
	  (use-package all-the-icons)
    #+END_SRC
** Git
   Using git in Emacs.
*** magit
    Git interface for Emacs.
    #+NAME: magit
    #+BEGIN_SRC emacs-lisp
	  (use-package magit
		:bind ("M-g s" . magit-status))
    #+END_SRC

*** git-gutter
    Display line changes.
    #+NAME: git-gutter
    #+BEGIN_SRC emacs-lisp
	  (use-package git-gutter
		:diminish git-gutter-mode
		:config
		(global-git-gutter-mode 't))
    #+END_SRC

*** git-time-machine
    Cycle through the git history of a file.
    #+NAME: git-gutter
    #+BEGIN_SRC emacs-lisp
	  (use-package git-timemachine
		:bind ("M-g t" . git-timemachine))
    #+END_SRC
** Programming
*** smartparens
	Smartparens is a minor mode for dealing with pairs in Emacs.
    #+NAME: smartparens
    #+BEGIN_SRC emacs-lisp
	  (use-package smartparens
		:diminish smartparens-mode
        :hook (prog-mode . smartparens-mode))
    #+END_SRC
*** yasippet
	Snippets.
	#+NAME: yasnippets
	#+BEGIN_SRC emacs-lisp
	  (use-package yasnippet
		:diminish yas-minor-mode
		:hook (prog-mode . yas-minor-mode)
		:config
		(use-package yasnippet-snippets
		  :config
		  (yas-reload-all)))
	#+END_SRC

*** flycheck
	Modern on-the-fly syntax checking extension for GNU Emacs.
	#+BEGIN_SRC emacs-lisp
	  (use-package flycheck
		:diminish
		:init (global-flycheck-mode))
	  (use-package flycheck-pos-tip
		:after flycheck
		:config (flycheck-pos-tip-mode))
	#+END_SRC

*** company
	Company is a text completion framework for Emacs. The name stands for "complete anything".
	#+NAME: company
	#+BEGIN_SRC emacs-lisp
	  (use-package company
		:diminish
		:bind (:map company-active-map
					("C-n" . company-select-next)
					("C-p" . company-select-previous))
		:init
		(add-hook 'after-init-hook 'global-company-mode)
		(setq company-require-match 'never
			  company-minimum-prefix-length 2
			  company-tooltip-align-annotations t
			  company-idle-delay 1
			  company-tooltip-limit 20
			  global-company-mode t))
	#+END_SRC

*** lsp
	Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company, flycheck and projectile.
    #+NAME: lsp-mode
	#+BEGIN_SRC emacs-lisp
	  (use-package lsp-mode
		:hook ((scala-mode . lsp)
			   (python-mode . lsp)
			   (java-mode . lsp)
			   (js-mode . lsp)
			   (sh-mode . lsp)
			   (c-mode . lsp))
		:config
		(setq lsp-prefer-flymake nil))


	  ;; optionally
	  (use-package lsp-ui
		:after lsp-mode
		:hook (lsp-mode-hook . lsp-ui-mode))

	  (use-package company-lsp
		:after '(company lsp-mode)
		:config
		(setq company-lsp-cache-candidates t
			  company-lsp-async t
			  company-lsp-enable-snippet t)
		(push 'company-lsp company-backends))

	  (use-package company-box
		:diminish
		:hook (company-mode . company-box-mode))

	  ;; if you are helm user
	  ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)

	  ;; if you are ivy user
	  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
	  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

	  ;; optionally if you want to use debugger
	  ;;(use-package dap-mode)
	  ;;(use-package dap-LANGUAGE) to load the dap adapter for your language

	#+END_SRC

*** C
	irony-mode is an Emacs minor-mode that aims at improving the editing experience for the C, C++ and Objective-C languages.
	#+BEGIN_SRC emacs-lisp
	  (use-package irony
		:diminish
		:hook (c++-mode-hook . irony-mode)
		:hook (objc-mode-hook . irony-mode)
		:hook (irony-mode . irony-cdb-autosetup-compile-options)
		:hook (c-mode-hook . irony-mode))

	  ;; support for company
	  (use-package company-irony
		:after '(company irony)
		:config (add-to-list 'company-backends 'company-irony))

	  ;;  This allows us to read docs while irony is working.
	  (use-package irony-eldoc
		:after '(irony))
	#+END_SRC

*** Java
	#+BEGIN_SRC emacs-lisp
	  (use-package lsp-java)
	#+END_SRC
*** Scala
	Enable scala-mode and sbt-mode.
	#+BEGIN_SRC emacs-lisp
	  (use-package scala-mode
		:mode "\\.s\\(cala\\|bt\\)$")

	  (use-package sbt-mode
		:diminish
		:commands sbt-start sbt-command
		:config
		;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
		;; allows using SPACE when in the minibuffer
		(substitute-key-definition
		 'minibuffer-complete-word
		 'self-insert-command
		 minibuffer-local-completion-map)
		 ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
		 (setq sbt:program-options '("-Dsbt.supershell=false")))
	#+END_SRC

*** JavaScript
	#+BEGIN_SRC emacs-lisp
	  (use-package js2-mode
		:config
		(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
	#+END_SRC

*** TODO Rust
*** TODO Go

** Org
   Org-mode is a document editing, formatting, and organizing mode, designed for notes, planning, and authoring within the free software text editor Emacs.
   This file is written in org-mode.
   #+NAME: org
   #+BEGIN_SRC emacs-lisp
     ;; org package configuration
     (use-package org
       :hook #'org-indent-mode
       :init
       (setq org-log-done 'time
             org-src-window-setup 'current-window
             org-todo-keywords '((sequence "TODO(t)" "SOMEDAY(s)" "NEXT(n)" "|")
                                 (sequence "WORKING(w!)" "BLOCKED(B@)" "|")
                                 (sequence "REPORT(r)" "BUG(b)" "KNOWN(k)" "|" "FIXED(f!)")
                                 (sequence "|" "DONE(d)" "CANCEL(c@)")
                                 (sequence "|" "STUDY(y!)")))
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((org . t)
          (C . t)
          (latex . t)
          (emacs-lisp . t)
          (sql . t)
          (shell . t)
          (python . t))))

     ;; org-bullets
     (use-package org-bullets
       :config
       (setq org-bullets-bullet-list '("∙"))
       (add-hook 'org-mode-hook 'org-bullets-mode))

     ;; change also org elipsis
     (setq org-ellipsis " ▼")

     ;; suport for html exporting
     (use-package htmlize
       :after org)

     ;; suport for hugo exporting
     (use-package ox-hugo
       :after org)
   #+END_SRC
** LaTex
   #+BEGIN_SRC emacs-lisp
	 (use-package tex
	   :ensure auctex
	   :config
	   (setq TeX-auto-save t
			 TeX-parse-self t
			 TeX-view-program-selection '(((output-dvi has-no-display-manager)
										   "dvi2tty")
										  ((output-dvi style-pstricks)
										   "dvips and gv")
										  (output-dvi "xdvi")
										  (output-pdf "mupdf")
										  (output-html "xdg-open")))
	   (add-to-list 'TeX-view-program-list '("mupdf" "mupdf %o")))


	 ;; company backend
	 (use-package company-auctex
	   :after '(company tex)
	   :config (company-auctex-init))


   #+END_SRC
